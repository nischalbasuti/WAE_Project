********* QUERY **********
create table my_stocks (symbol varchar(20) not null, n_shares integer not null, date_acquired date not null );
**************************

CREATE TABLE
********* QUERY **********
COPY  my_stocks FROM STDIN with delimiter E'\t';
**************************

COPY 5
********* QUERY **********
create table stock_prices (symbol varchar(20) not null, quote_date date not null, price decimal not null );
**************************

CREATE TABLE
********* QUERY **********
insert into stock_prices (symbol, quote_date, price)
select distinct on (symbol) symbol, current_date, '31.415' from my_stocks;
**************************

INSERT 0 5
********* QUERY **********
create table newly_acquired_stocks (symbol varchar(20) not null, n_shares integer not null, date_acquired date not null );
**************************

CREATE TABLE
********* QUERY **********
insert into newly_acquired_stocks (symbol, n_shares, date_acquired)
select * from my_stocks limit (select count(symbol)/2 from my_stocks);
**************************

INSERT 0 2
********* QUERY **********
select stock_prices.symbol, n_shares, (price/n_shares) price_per_share, (price*n_shares) as value from my_stocks, stock_prices where my_stocks.symbol = stock_prices.symbol;
**************************

 symbol | n_shares |    price_per_share     |  value   
--------+----------+------------------------+----------
 AAA    |       50 | 0.62830000000000000000 | 1570.750
 BBB    |       40 | 0.78537500000000000000 | 1256.600
 CCC    |       50 | 0.62830000000000000000 | 1570.750
 DDD    |       50 | 0.62830000000000000000 | 1570.750
 EEE    |       80 | 0.39268750000000000000 | 2513.200
(5 rows)

********* QUERY **********
insert into my_stocks (symbol, n_shares, date_acquired) values ('SSS', '80', current_date);
**************************

INSERT 0 1
********* QUERY **********
select stock_prices.symbol, my_stocks.n_shares, ((stock_prices.price)/(my_stocks.n_shares)) as price_per_share from my_stocks full outer join stock_prices on stock_prices.symbol = my_stocks.symbol;
**************************

 symbol | n_shares |    price_per_share     
--------+----------+------------------------
 AAA    |       50 | 0.62830000000000000000
 BBB    |       40 | 0.78537500000000000000
 CCC    |       50 | 0.62830000000000000000
 DDD    |       50 | 0.62830000000000000000
 EEE    |       80 | 0.39268750000000000000
        |       80 |                       
(6 rows)

********* QUERY **********
select my_stocks.symbol, my_stocks.n_shares, ((stock_prices.price)/(my_stocks.n_shares)) as price_per_share from my_stocks full outer join stock_prices on stock_prices.symbol = my_stocks.symbol;
**************************

 symbol | n_shares |    price_per_share     
--------+----------+------------------------
 AAA    |       50 | 0.62830000000000000000
 BBB    |       40 | 0.78537500000000000000
 CCC    |       50 | 0.62830000000000000000
 DDD    |       50 | 0.62830000000000000000
 EEE    |       80 | 0.39268750000000000000
 SSS    |       80 |                       
(6 rows)

********* QUERY **********
create or replace function sum_symbol (string varchar)
returns integer as $$
declare
ascii_sum integer := 0;
chars varchar[];
c varchar;
begin 
select regexp_split_to_array(string, '') into chars;
foreach c in array chars
loop
ascii_sum = ascii_sum + ascii(c);
end loop;
return ascii_sum;
end;
$$ LANGUAGE plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
update stock_prices set price = sum_symbol(stock_prices.symbol);
**************************

UPDATE 5
********* QUERY **********
select * from stock_prices ;
**************************

 symbol | quote_date | price 
--------+------------+-------
 AAA    | 2018-09-14 |   195
 BBB    | 2018-09-14 |   198
 CCC    | 2018-09-14 |   201
 DDD    | 2018-09-14 |   204
 EEE    | 2018-09-14 |   207
(5 rows)

********* QUERY **********
CREATE OR REPLACE FUNCTION portfolio_value()
RETURNS numeric AS $$
DECLARE
sum_value numeric := 0;
n_share CURSOR FOR SELECT n_shares*price val from my_stocks full outer join stock_prices on stock_prices.symbol = my_stocks.symbol;
num_share RECORD;
BEGIN
open n_share;
IF n_share IS NOT NULL THEN
LOOP
 FETCH n_share INTO num_share;
 IF num_share.val <> 0 THEN
 RAISE INFO '% ===> %',sum_value,num_share.val;
 sum_value = sum_value + num_share.val; 
 END IF;
 EXIT WHEN NOT FOUND;
END LOOP;
END IF;
close n_share;
RETURN sum_value;
END;
$$ LANGUAGE plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
select portfolio_value();
**************************

 portfolio_value 
-----------------
           54480
(1 row)

********* QUERY **********
UPDATE my_stocks 
SET date_acquired = current_date
where   my_stocks.symbol in
 (
 select my_stocks.symbol 
 from my_stocks, stock_prices
 where my_stocks.symbol = stock_prices.symbol and
 (select AVG(price) from stock_prices) > stock_prices.price
 );
**************************

UPDATE 2
********* QUERY **********
select symbol, SUM(n_shares) AS total_shares from my_stocks group by symbol;
**************************

 symbol | total_shares 
--------+--------------
 BBB    |           40
 SSS    |           80
 DDD    |           50
 CCC    |           50
 AAA    |           50
 EEE    |           80
(6 rows)

********* QUERY **********
insert into my_stocks (symbol, n_shares, date_acquired) values ('AAA', '80', current_date);
**************************

INSERT 0 1
********* QUERY **********
select my_stocks.symbol , sum(n_shares) as sum_shares, ((sum(n_shares))*price) as sum_value from my_stocks , stock_prices where my_stocks.symbol = stock_prices.symbol group by my_stocks.symbol,price having count(my_stocks.symbol) >= 2;
**************************

 symbol | sum_shares | sum_value 
--------+------------+-----------
 AAA    |        130 |     25350
(1 row)

********* QUERY **********
DROP VIEW stocks_i_like;
**************************

DROP VIEW
********* QUERY **********
DROP TABLE my_stocks CASCADE;
**************************

DROP TABLE
********* QUERY **********
DROP TABLE stock_prices CASCADE;
**************************

DROP TABLE
********* QUERY **********
DROP TABLE newly_acquired_stocks CASCADE;
**************************

DROP TABLE
********* QUERY **********
CREATE TABLE my_stocks (
	symbol VARCHAR(20) NOT NULL,
	n_shares INTEGER NOT NULL,
	date_acquired DATE NOT NULL
);
**************************

CREATE TABLE
********* QUERY **********
COPY  my_stocks FROM STDIN WITH delimiter E'\t';
**************************

COPY 5
********* QUERY **********
CREATE TABLE stock_prices (
	symbol VARCHAR(20) NOT NULL,
	quote_date DATE NOT NULL,
	price INTEGER NOT NULL
);
**************************

CREATE TABLE
********* QUERY **********
INSERT INTO stock_prices (
	symbol, 
	quote_date, 
	price)
SELECT DISTINCT ON 
	(symbol) symbol, 
	CURRENT_DATE,
	31.415
FROM my_stocks;
**************************

INSERT 0 5
********* QUERY **********
CREATE TABLE newly_acquired_stocks (
	symbol VARCHAR(20) NOT NULL, 
	n_shares INTEGER NOT NULL, 
	date_acquired DATE NOT NULL 
);
**************************

CREATE TABLE
********* QUERY **********
INSERT INTO newly_acquired_stocks (
	symbol, 
	n_shares, 
	date_acquired)
SELECT * FROM my_stocks 
limit (SELECT COUNT(symbol)/2 FROM my_stocks);
**************************

INSERT 0 2
********* QUERY **********
SELECT * FROM newly_acquired_stocks;
**************************

 symbol | n_shares | date_acquired 
--------+----------+---------------
 AAA    |       50 | 2018-08-25
 BBB    |       40 | 2018-08-27
(2 rows)

********* QUERY **********
SELECT stock_prices.symbol, n_shares, (price/n_shares) price_per_share, (price*n_shares) AS value 
FROM my_stocks, stock_prices 
WHERE my_stocks.symbol = stock_prices.symbol;
**************************

 symbol | n_shares | price_per_share | value 
--------+----------+-----------------+-------
 AAA    |       50 |               0 |  1550
 BBB    |       40 |               0 |  1240
 CCC    |       50 |               0 |  1550
 DDD    |       50 |               0 |  1550
 EEE    |       80 |               0 |  2480
(5 rows)

********* QUERY **********
INSERT INTO my_stocks (symbol, n_shares, date_acquired) VALUES ('SSS', '80', current_date);
**************************

INSERT 0 1
********* QUERY **********
SELECT stock_prices.symbol, my_stocks.n_shares, ((stock_prices.price)/(my_stocks.n_shares)) AS price_per_share 
FROM my_stocks FULL OUTER JOIN stock_prices ON stock_prices.symbol = my_stocks.symbol;
**************************

 symbol | n_shares | price_per_share 
--------+----------+-----------------
 AAA    |       50 |               0
 BBB    |       40 |               0
 CCC    |       50 |               0
 DDD    |       50 |               0
 EEE    |       80 |               0
        |       80 |                
(6 rows)

********* QUERY **********
SELECT my_stocks.symbol, my_stocks.n_shares, ((stock_prices.price)/(my_stocks.n_shares)) AS price_per_share 
FROM my_stocks FULL OUTER JOIN stock_prices ON stock_prices.symbol = my_stocks.symbol;
**************************

 symbol | n_shares | price_per_share 
--------+----------+-----------------
 AAA    |       50 |               0
 BBB    |       40 |               0
 CCC    |       50 |               0
 DDD    |       50 |               0
 EEE    |       80 |               0
 SSS    |       80 |                
(6 rows)

********* QUERY **********
CREATE OR REPLACE function sum_symbol (string VARCHAR)
RETURNS INTEGER AS $$
DECLARE
ascii_sum INTEGER := 0;
chars VARCHAR[];
c VARCHAR;
BEGIN 
SELECT regexp_split_to_array (string, '') INTO chars;
FOREACH c IN ARRAY chars
LOOP
ascii_sum = ascii_sum + ASCII(c);
END LOOP;
RETURN ascii_sum;
END;
$$ LANGUAGE PLPGSQL;
**************************

CREATE FUNCTION
********* QUERY **********
UPDATE stock_prices SET price = sum_symbol(stock_prices.symbol);
**************************

UPDATE 5
********* QUERY **********
CREATE OR REPLACE FUNCTION portfolio_value()
RETURNS numeric AS $$
DECLARE
sum_value numeric := 0;
n_share CURSOR FOR SELECT n_shares*price val from my_stocks full outer join stock_prices on stock_prices.symbol = my_stocks.symbol;
num_share RECORD;
BEGIN
open n_share;
IF n_share IS NOT NULL THEN
LOOP
 FETCH n_share INTO num_share;
 IF num_share.val <> 0 THEN
 RAISE INFO '% ===> %',sum_value,num_share.val;
 sum_value = sum_value + num_share.val; 
 END IF;
 EXIT WHEN NOT FOUND;
END LOOP;
END IF;
close n_share;
RETURN sum_value;
END;
$$ LANGUAGE plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
SELECT portfolio_value();
**************************

 portfolio_value 
-----------------
           54480
(1 row)

********* QUERY **********
UPDATE my_stocks 
SET date_acquired = current_date
WHERE   my_stocks.symbol IN
 (
 	SELECT my_stocks.symbol 
 	FROM my_stocks, stock_prices
 	WHERE my_stocks.symbol = stock_prices.symbol 
	AND (SELECT AVG(price) FROM stock_prices) > stock_prices.price
 );
**************************

UPDATE 2
********* QUERY **********
SELECT symbol, SUM(n_shares) AS total_shares FROM my_stocks GROUP BY symbol;
**************************

 symbol | total_shares 
--------+--------------
 BBB    |           40
 SSS    |           80
 DDD    |           50
 CCC    |           50
 AAA    |           50
 EEE    |           80
(6 rows)

********* QUERY **********
INSERT INTO my_stocks (symbol, n_shares, date_acquired) VALUES ('AAA', '80', CURRENT_DATE);
**************************

INSERT 0 1
********* QUERY **********
SELECT my_stocks.symbol , SUM(n_shares) AS sum_shares, ((SUM(n_shares))*price) AS sum_value 
FROM my_stocks , stock_prices 
WHERE my_stocks.symbol = stock_prices.symbol 
GROUP BY my_stocks.symbol,price 
HAVING COUNT(my_stocks.symbol) >= 2;
**************************

 symbol | sum_shares | sum_value 
--------+------------+-----------
 AAA    |        130 |     25350
(1 row)

********* QUERY **********
CREATE VIEW stocks_i_like AS
SELECT my_stocks.symbol , SUM(n_shares) AS sum_shares, ((SUM(n_shares))*price) AS sum_value 
FROM my_stocks , stock_prices 
WHERE my_stocks.symbol = stock_prices.symbol 
GROUP BY my_stocks.symbol,price 
HAVING COUNT(my_stocks.symbol) >= 2;
**************************

CREATE VIEW
********* QUERY **********
SELECT * FROM stocks_i_like;
**************************

 symbol | sum_shares | sum_value 
--------+------------+-----------
 AAA    |        130 |     25350
(1 row)

********* QUERY **********
DROP VIEW stocks_i_like;
**************************

DROP VIEW
********* QUERY **********
DROP TABLE my_stocks CASCADE;
**************************

DROP TABLE
********* QUERY **********
DROP TABLE stock_prices CASCADE;
**************************

DROP TABLE
********* QUERY **********
DROP TABLE newly_acquired_stocks CASCADE;
**************************

DROP TABLE
********* QUERY **********
CREATE TABLE my_stocks (
	symbol VARCHAR(20) NOT NULL,
	n_shares INTEGER NOT NULL,
	date_acquired DATE NOT NULL
);
**************************

CREATE TABLE
********* QUERY **********
COPY  my_stocks FROM STDIN WITH delimiter E'\t';
**************************

COPY 5
********* QUERY **********
CREATE TABLE stock_prices (
	symbol VARCHAR(20) NOT NULL,
	quote_date DATE NOT NULL,
	price DECIMAL NOT NULL
);
**************************

CREATE TABLE
********* QUERY **********
INSERT INTO stock_prices (
	symbol, 
	quote_date, 
	price)
SELECT DISTINCT ON 
	(symbol) symbol, 
	CURRENT_DATE,
	31.415
FROM my_stocks;
**************************

INSERT 0 5
********* QUERY **********
CREATE TABLE newly_acquired_stocks (
	symbol VARCHAR(20) NOT NULL, 
	n_shares INTEGER NOT NULL, 
	date_acquired DATE NOT NULL 
);
**************************

CREATE TABLE
********* QUERY **********
INSERT INTO newly_acquired_stocks (
	symbol, 
	n_shares, 
	date_acquired)
SELECT * FROM my_stocks 
limit (SELECT COUNT(symbol)/2 FROM my_stocks);
**************************

INSERT 0 2
********* QUERY **********
SELECT * FROM newly_acquired_stocks;
**************************

 symbol | n_shares | date_acquired 
--------+----------+---------------
 AAA    |       50 | 2018-08-25
 BBB    |       40 | 2018-08-27
(2 rows)

********* QUERY **********
SELECT stock_prices.symbol, n_shares, (price/n_shares) price_per_share, (price*n_shares) AS value 
FROM my_stocks, stock_prices 
WHERE my_stocks.symbol = stock_prices.symbol;
**************************

 symbol | n_shares |    price_per_share     |  value   
--------+----------+------------------------+----------
 AAA    |       50 | 0.62830000000000000000 | 1570.750
 BBB    |       40 | 0.78537500000000000000 | 1256.600
 CCC    |       50 | 0.62830000000000000000 | 1570.750
 DDD    |       50 | 0.62830000000000000000 | 1570.750
 EEE    |       80 | 0.39268750000000000000 | 2513.200
(5 rows)

********* QUERY **********
INSERT INTO my_stocks (symbol, n_shares, date_acquired) VALUES ('SSS', '80', current_date);
**************************

INSERT 0 1
********* QUERY **********
SELECT stock_prices.symbol, my_stocks.n_shares, ((stock_prices.price)/(my_stocks.n_shares)) AS price_per_share 
FROM my_stocks FULL OUTER JOIN stock_prices ON stock_prices.symbol = my_stocks.symbol;
**************************

 symbol | n_shares |    price_per_share     
--------+----------+------------------------
 AAA    |       50 | 0.62830000000000000000
 BBB    |       40 | 0.78537500000000000000
 CCC    |       50 | 0.62830000000000000000
 DDD    |       50 | 0.62830000000000000000
 EEE    |       80 | 0.39268750000000000000
        |       80 |                       
(6 rows)

********* QUERY **********
SELECT my_stocks.symbol, my_stocks.n_shares, ((stock_prices.price)/(my_stocks.n_shares)) AS price_per_share 
FROM my_stocks FULL OUTER JOIN stock_prices ON stock_prices.symbol = my_stocks.symbol;
**************************

 symbol | n_shares |    price_per_share     
--------+----------+------------------------
 AAA    |       50 | 0.62830000000000000000
 BBB    |       40 | 0.78537500000000000000
 CCC    |       50 | 0.62830000000000000000
 DDD    |       50 | 0.62830000000000000000
 EEE    |       80 | 0.39268750000000000000
 SSS    |       80 |                       
(6 rows)

********* QUERY **********
CREATE OR REPLACE function sum_symbol (string VARCHAR)
RETURNS INTEGER AS $$
DECLARE
ascii_sum INTEGER := 0;
chars VARCHAR[];
c VARCHAR;
BEGIN 
SELECT regexp_split_to_array (string, '') INTO chars;
FOREACH c IN ARRAY chars
LOOP
ascii_sum = ascii_sum + ASCII(c);
END LOOP;
RETURN ascii_sum;
END;
$$ LANGUAGE PLPGSQL;
**************************

CREATE FUNCTION
********* QUERY **********
UPDATE stock_prices SET price = sum_symbol(stock_prices.symbol);
**************************

UPDATE 5
********* QUERY **********
CREATE OR REPLACE FUNCTION portfolio_value()
RETURNS numeric AS $$
DECLARE
sum_value numeric := 0;
n_share CURSOR FOR SELECT n_shares*price val from my_stocks full outer join stock_prices on stock_prices.symbol = my_stocks.symbol;
num_share RECORD;
BEGIN
open n_share;
IF n_share IS NOT NULL THEN
LOOP
 FETCH n_share INTO num_share;
 IF num_share.val <> 0 THEN
 RAISE INFO '% ===> %',sum_value,num_share.val;
 sum_value = sum_value + num_share.val; 
 END IF;
 EXIT WHEN NOT FOUND;
END LOOP;
END IF;
close n_share;
RETURN sum_value;
END;
$$ LANGUAGE plpgsql;
**************************

CREATE FUNCTION
********* QUERY **********
SELECT portfolio_value();
**************************

 portfolio_value 
-----------------
           54480
(1 row)

********* QUERY **********
UPDATE my_stocks 
SET date_acquired = current_date
WHERE   my_stocks.symbol IN
 (
 	SELECT my_stocks.symbol 
 	FROM my_stocks, stock_prices
 	WHERE my_stocks.symbol = stock_prices.symbol 
	AND (SELECT AVG(price) FROM stock_prices) > stock_prices.price
 );
**************************

UPDATE 2
********* QUERY **********
SELECT symbol, SUM(n_shares) AS total_shares FROM my_stocks GROUP BY symbol;
**************************

 symbol | total_shares 
--------+--------------
 BBB    |           40
 SSS    |           80
 DDD    |           50
 CCC    |           50
 AAA    |           50
 EEE    |           80
(6 rows)

********* QUERY **********
INSERT INTO my_stocks (symbol, n_shares, date_acquired) VALUES ('AAA', '80', CURRENT_DATE);
**************************

INSERT 0 1
********* QUERY **********
SELECT my_stocks.symbol , SUM(n_shares) AS sum_shares, ((SUM(n_shares))*price) AS sum_value 
FROM my_stocks , stock_prices 
WHERE my_stocks.symbol = stock_prices.symbol 
GROUP BY my_stocks.symbol,price 
HAVING COUNT(my_stocks.symbol) >= 2;
**************************

 symbol | sum_shares | sum_value 
--------+------------+-----------
 AAA    |        130 |     25350
(1 row)

********* QUERY **********
CREATE VIEW stocks_i_like AS
SELECT my_stocks.symbol , SUM(n_shares) AS sum_shares, ((SUM(n_shares))*price) AS sum_value 
FROM my_stocks , stock_prices 
WHERE my_stocks.symbol = stock_prices.symbol 
GROUP BY my_stocks.symbol,price 
HAVING COUNT(my_stocks.symbol) >= 2;
**************************

CREATE VIEW
********* QUERY **********
SELECT * FROM stocks_i_like;
**************************

 symbol | sum_shares | sum_value 
--------+------------+-----------
 AAA    |        130 |     25350
(1 row)

