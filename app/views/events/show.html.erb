<style type="text/css" media="screen">
    table { 
        border-collapse: separate; 
        border-spacing: 0 10px; 
    }
    td, th {
        border: solid 1px grey;
        border-style: solid none;
        padding: 10px;
        width:20%;
        text-align: center
    }
    td:first-child, th:first-child {
        border-left-style: solid;
        border-top-left-radius: 30px; 
        border-bottom-left-radius: 30px;
    }
    td:last-child, th:last-child {
        border-right-style: solid;
        border-bottom-right-radius: 30px; 
        border-top-right-radius: 30px; 
    }
</style>

<p id="notice"><%= notice %></p>

<p>
  <strong>Name:</strong>
  <%= @event.name %>
</p>

<p>
  <strong>Description:</strong>
  <%= @event.description %>
</p>

<p>
  <strong>Start time:</strong>
  <%= @event.start_time %>
</p>

<p>
  <strong>End time:</strong>
  <%= @event.end_time %>
</p>

<% if current_user.admin? or current_user.chair? %>
    <%= link_to "Manage Event", '/events/manage?id='+@event.id.to_s %> |
    <%= link_to 'Edit', edit_event_path(@event) %> |
<% end %>
<%= link_to 'Back', events_path %>

<hr>
<% if current_user.user_events.where(user: current_user,event: @event).count == 0 %>
  <%= form_tag(:action => 'register', :class => 'form') do %>
    <%= hidden_field_tag 'user_id', current_user.id%>
    <%= hidden_field_tag 'event_id', @event.id%>
    <%= submit_tag "Register", :id => "submit", :name => "submit", :class => "btn btn-success form_submit", :disabled => false, :disable_with => "Please wait..." %>
  <% end %>
<% else %>
  <%= form_tag(:action => 'unregister', :class => 'form') do %>
    <%= hidden_field_tag 'user_id', current_user.id%>
    <%= hidden_field_tag 'event_id', @event.id%>
    <%= submit_tag "Unregister", :id => "submit", :name => "submit", :class => "btn btn-danger form_submit", :disabled => false, :disable_with => "Please wait..." %>
  <% end %>
<% end %>
<hr>

<h4>Activities:</h4>
    <table class="table table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Start time</th>
                <th>End time</th>
                <% if current_user.admin? or current_user.chair? %>
                    <th></th>
                    <th></th>
                <% end %>
            </tr>
        </thead>

        <tbody id='activity-rows'>
            <% @activities.each do |activity| %>
                <tr class='activity-row'
                    id='<%= activity.id %>'
                    startTime='<%= activity.start_time %>'
                    endTime='<%= activity.end_time %>'>

                    <td><%= link_to activity.name, activity %></td>
                    <td><%= activity.description %></td>
                    <td class="startTime"><%= activity.start_time %></td>
                    <td class="endTime"><%= activity.end_time %></td>
                    <td><%= link_to 'Edit', edit_activity_path(activity) %></td>
                    <td><%= link_to 'Destroy', activity, method: :delete, data: { confirm: 'Are you sure?' } %></td>
                </tr>
            <% end %>
        </tbody>
        <% if current_user.admin? or current_user.chair? %>
            <tbody>
                <tr>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td><%= link_to "Update Activities",  "", remote:true, :onclick => "return updateActivities(#{@event.id})", :class => "btn btn-success"%></td>
                </tr>
            </tbody>
        <% end %>
    </table>
<%= link_to 'Add Activity', "/activities/new?event_id=#{@event.id}", :class=> "btn" %>

<br>

<hr>

<h4>Forums:</h4>

<%= link_to "Create New Forum", "/forums/new?event_id=#{@event.id}" %>

<ul>
    <% @event.forums.each do |forum| %>
        <li>
            <%= link_to forum.title, '/forums/'+forum.id.to_s %>
        </li>
    <% end %>
</ul>


<!-- The following is some bad hackey code, apologies to future me. -->

<% if current_user.admin? or current_user.chair? %>
    <script charset="utf-8">

        // Sort elements and swap start and end times of affected arrays.
        $('#activity-rows').sortable({
            start: (event, ui) => {
                ui.item.startPos = ui.item.index();
                window.startState = $('#activity-rows').sortable("toArray")
                
            },
            stop: (event, ui) => {
                currentState = $('#activity-rows').sortable("toArray")
                // console.log(window.startState[ui.item.startPos], currentState[ui.item.index()]);


                function swapStartAndEndTime(a, b) {
                    // Swap start and end time
                    function swapAttributes(attribute, a, b) {
                        tmp = a.getAttribute(attribute)
                        a.setAttribute(attribute, b.getAttribute(attribute))
                        b.setAttribute(attribute, tmp)
                    }
                    swapAttributes("startTime", a, b)
                    swapAttributes("endTime", a, b)

                    // Set the html of start and end time columns of the row.
                    a.querySelector(".startTime").innerHTML = a.getAttribute('startTime')
                    a.querySelector(".endTime").innerHTML = a.getAttribute('endTime')

                    b.querySelector(".startTime").innerHTML = b.getAttribute('startTime')
                    b.querySelector(".endTime").innerHTML = b.getAttribute('endTime')
                }

                // Swap the moved element with the destination element, then move the
                // swap all the other elements up/down one by one.
                let startEle = document.getElementById(window.startState[ui.item.startPos]);
                let destEle  = document.getElementById(window.startState[ui.item.index()]);
                swapStartAndEndTime(startEle, destEle);

                if(ui.item.startPos < ui.item.index()) {
                    for (let i = ui.item.index()-1; i > ui.item.startPos; i--) {
                        let startEle = document.getElementById(currentState[i])
                        let destEle  = document.getElementById(currentState[i-1])
                        swapStartAndEndTime(startEle, destEle);
                    }
                } else {
                    for (let i = ui.item.index()+1; i < ui.item.startPos; i++) {
                        let startEle = document.getElementById(currentState[i])
                        let destEle  = document.getElementById(currentState[i+1])
                        swapStartAndEndTime(startEle, destEle);
                    }
                }
            }
        });
        // window.startState = $('#activity-rows').sortable("getArray")

        function buildUpdateActivitiesRequestData(event_id) {
            let activityRows = [];
            for (const row of document.getElementsByClassName('activity-row')) {
                let rowObj = {};
                rowObj.id = row.getAttribute("id");
                rowObj.startTime = row.getAttribute("startTime");
                rowObj.endTime = row.getAttribute("endTime");

                activityRows.push(rowObj);
            }
            return {
                'event_id': event_id,
                'activities': activityRows
            }

        }

        function updateActivities(event_id) {
            let data = buildUpdateActivitiesRequestData(event_id);
            function successCallback(data, textStatus, jqXHR) {
                alert(data.message)
                console.log(data, textStatus)
            }
            $.ajax({
                type: "POST",
                url: '/activities/update_activities',
                data: JSON.stringify(data),
                success: successCallback,
                dataType: "json",
                contentType: "application/json",
                processData: true
            });
        }
    </script>

<% end %>

